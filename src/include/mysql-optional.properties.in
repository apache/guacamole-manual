#
# The hostname or IP address of the server hosting your database. If not
# specified, "localhost" will be used by default.
#
mysql-hostname: localhost

#
# The port number of the MySQL or MariaDB database to connect to. If not
# specified, the standard MySQL / MariaDB port 3306 will be used.
#
mysql-port: 3306

#
# Controls which JDBC driver the extension attempts to load. By default, the
# installed JDBC driver will be automatically detected. Possible values are:
#
# mysql
# : [The **MySQL** Connector/J JDBC driver](https://dev.mysql.com/downloads/connector/j/).
#
# mariadb
# : [The **MariaDB** Connector/J JDBC driver](https://mariadb.com/kb/en/about-mariadb-connector-j/).
#
mysql-driver: mariadb

#
# Specifies the timezone the MySQL server is configured to run in. While the
# MySQL driver attempts to auto-detect the timezone in use by the server, there
# are many cases where the timezone provided by the operating system is either
# unknown by Java, or matches multiple timezones. In these cases MySQL may
# either complain or refuse the connection unless the timezone is specified as
# part of the connection. This property allows the timezone of the server to be
# specified so that the connection can continue and the JDBC driver can
# properly translate timestamps.  The property accepts timezones in the
# following formats:
#
# Region/Locale
# : Well-known time zone identifiers, in the Region/Locale format, as defined
#   by the [IANA time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones),
#   such as `America/Los_Angeles`, `Africa/Johannesburg`, or `China/Shanghai`.
#
# GMT+/-HH:MM
# : GMT or custom timezones specified by GMT offset, such as `GMT`, `GMT+0130`,
#   `GMT+06:00`, or `GMT-9`.
#
mysql-server-timezone: GMT

#
# This property sets the SSL mode that the JDBC driver will attempt to use when
# communicating with the remote MySQL server. The values for this property
# match the standard values supported by the MySQL and MariaDB JDBC drivers:
#
# disabled
# : Do not use SSL, and fail if the server requires it. For compatibility this
#   will also set the legacy JDBC driver property useSSL to false.
#
# preferred
# : Prefer SSL, but fall back to plain-text if an SSL connection cannot be
#   negotiated. This is the default.
#
# required
# : Require SSL connections, and fail if SSL cannot be negotiated. This mode
#   does not perform any validition checks on the certificate in use by the
#   server, the issuer, etc.
#
# verify-ca
# : Require SSL connections, and check to make sure that the certificate issuer
#   is known to be valid.
#
# verify-identity
# : Require SSL connections, and check to make sure that the server certificate
#   is issued by a known authority, and that the identity of the server
#   matches the identity on the certificate.
#
mysql-ssl-mode: preferred

#
# The file that will store trusted SSL certificates for the JDBC driver to use
# when validating CA and server certificates. This should be a JKS-formatted
# certificate store. This property is optional and defaults to Java's normal
# trusted certificate locations, which vary based on the version of Java in
# use.
#
mysql-ssl-trust-store: /etc/guacamole/mysql-trust.jks

#
# The password to use to access the SSL trusted certificate store, if one is
# required. By default no password will be used.
#
mysql-ssl-trust-password: some-password

#
# The file that contains the client certificate to use when making SSL
# connections to the MySQL server. This should be a JKS-formatted certificate
# store that contains a private key and certificate pair. This property is
# optional, and by default no client certificate will be used for the SSL
# connection.
#
mysql-ssl-client-store: /etc/guacamole/mysql-client.jks

#
# The password to use to access the client certificate store, if one is
# required. By default no password will be used.
#
mysql-ssl-client-password: some-password

#
# Controls how many objects may be retrieved from the database in a single
# query. If more objects than this number are requested, retrieval of those
# objects will be automatically and transparently split across multiple
# queries.
#
# By default, MySQL/MariaDB queries will retrieve no more than 1000 objects.
#
mysql-batch-size: 1000
