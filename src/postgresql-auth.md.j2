{# vim: set filetype=markdown.jinja : #}
{%- import 'include/ext-macros.md.j2' as ext with context -%}
{%- import 'include/jdbc-macros.md.j2' as jdbc with context -%}

Database setup for PostgreSQL
=============================

To use Guacamole with a PostgreSQL database, you will need:

1. An instance of the PostgreSQL database server.

2. Sufficient permission to create new databases, to create new users, and to
   grant those users permissions.

3. Network access to the database from the Guacamole server.

If this is not the case, install PostgreSQL now. Most distributions will
provide a convenient PostgreSQL package which will set up everything for you.
If you prefer Docker, the [`postgres`](https://hub.docker.com/_/postgres)
Docker image is also a reasonable option. If you don't wish to use PostgreSQL,
Guacamole additionally supports:

* [MariaDB / MySQL](mysql-auth)
* [SQL Server](sqlserver-auth)

```{include} include/warn-config-changes.md
```

(postgresql-auth-database-creation)=

Creating the Guacamole database
-------------------------------

It is best practice to use a dedicated database and user for the Guacamole web
application, and these instructions cover only this method.

If using the [`postgres`](https://hub.docker.com/_/postgres) Docker image:
: Set the `POSTGRES_DB` environment variable to the desired name of the
  database. The Docker image will automatically create this database when the
  container starts for the first time.

If using a native installation of PostgreSQL:
: Manually create a database for PostgreSQL by executing a
  `CREATE DATABASE` query with the `psql` client:

  ```sql
  CREATE DATABASE guacamole_db;
  ```

### Initializing the database

::::{tab} {{ native_tab_title }}
The schema scripts necessary to initialize the PostgreSQL version of Guacamole's
database are provided within the `postgresql/schema/` directory of {{ ext.downloadLink('guacamole-auth-jdbc') }},
which must be downloaded from [the release page for Apache Guacamole {{ version }}](https://guacamole.apache.org/releases/{{ version }})
and extracted first.

Running each of these scripts against the newly created database will
initialize it with Guacamole's schema. You can run these scripts using the
standard `psql` client, but the method of running `psql` varies depending on
whether you are using Docker to provide your database.

If using the [`postgres`](https://hub.docker.com/_/postgres) Docker image:
: The schema initialization scripts should be run against the newly created
  database by running the standard `psql` command-line client _within the
  container_:

  ```console
  $ cat schema/*.sql | docker exec -i some-postgresql \
      psql -U guacamole_user -d guacamole_db -f -
  ```

If using a native installation of PostgreSQL:
: The schema initialization scripts should be run against the newly created
  database using the standard `psql` client directly from the command-line:

  ```console
  $ cat schema/*.sql | psql -d guacamole_db -f -
  ```
::::

::::{tab} {{ container_tab_title }}
The schema scripts necessary to initialize the PostgreSQL version of Guacamole's
database are provided within the `/opt/guacamole/extensions/guacamole-auth-jdbc/postgresql/schema`
directory of the `guacamole/guacamole` image.

Additionally, an `initdb.sh` script is provided at `/opt/guacamole/bin/initdb.sh`
that can be used to extract the required schema initialization script:

```console
$ docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgresql > initdb.sql
```

If using the [`postgres`](https://hub.docker.com/_/postgres) Docker image via Docker Compose:
{% filter defListEntry %}
{{ jdbc.volumeInitdb('postgresql') }}
{% endfilter %}

If using the [`postgres`](https://hub.docker.com/_/postgres) Docker image _without_ Docker Compose:
: Use the `initdb.sh` script included with the `guacamole/guacamole` image to
  send the required initialization script to the standard `psql` command-line
  client _within the database container_:

  ```console
  $ docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgresql | \
      docker exec -i some-postgresql psql -U guacamole_user -d guacamole_db -f -
  ```

If using a native installation of PostgreSQL:
: Use the `initdb.sh` script included with the `guacamole/guacamole` image to
  automatically produce the SQL required to initialize an existing database:

  ```console
  $ docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgresql | \
      psql -d guacamole_db -f -
  ```
::::

Granting Guacamole access to the database
-----------------------------------------

For Guacamole to be able to execute queries against the database, you must
create a new user for the database and grant that user sufficient privileges to
manage the contents of all tables in the database.

If using the [`postgres`](https://hub.docker.com/_/postgres) Docker image:
: Set the `POSTGRES_USER` environment variable to the desired name of the
  dedicated user, and the `POSTGRES_PASSWORD` environment variable to the
  desired password. The Docker image will automatically create this user when
  the container starts and grant them full access to the Guacamole database.

If using a native installation of PostgreSQL:
: The dedicated user for Guacamole must be manually created and granted
  sufficient privileges. The user created for Guacamole needs only `SELECT`,
  `UPDATE`, `INSERT`, and `DELETE` permissions on all tables in the Guacamole
  database, as well as `SELECT` and `USAGE` permission on all sequences within
  all Guacamole tables.

  ```sql
  CREATE USER guacamole_user WITH PASSWORD 'some_password';
  GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO guacamole_user;
  GRANT SELECT,USAGE ON ALL SEQUENCES IN SCHEMA public TO guacamole_user;
  ```

(postgresql-auth-installation)=

Upgrading an existing Guacamole database
----------------------------------------

{{ jdbc.upgrade('postgresql') }}

:::{important}
Because the permissions granted to the Guacamole-specific PostgreSQL user when
the database was first created will not automatically be granted for any new
tables and sequences, you will also need to re-grant those permissions after
applying any upgrade relevant scripts:

```sql
GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO guacamole_user;
GRANT SELECT,USAGE ON ALL SEQUENCES IN SCHEMA public TO guacamole_user;
```
:::

Installing/Enabling support for PostgreSQL
------------------------------------------

{% call jdbc.install('postgresql') %}
For PostgreSQL, the proper driver is [the JDBC driver provided by the
PostgreSQL project](https://jdbc.postgresql.org/download/#latest-versions).
{% endcall %}

{#
 # Configuration section (template includes all required headers)
 # --------------------------------------------------------------
 #}
{{ jdbc.config('postgresql') }}

Completing installation
-----------------------

```{include} include/ext-completing.md
```

(postgresql-auth-default-user)=

Logging in
----------

```{include} include/jdbc-default-user.md
```

