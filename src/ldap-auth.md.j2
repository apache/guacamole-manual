{# vim: set filetype=markdown.jinja : #}
{%- import 'include/ext-macros.md.j2' as ext with context -%}

LDAP authentication
===================

Guacamole supports LDAP authentication via an extension available from the main
project website. This extension allows users and connections to be stored
directly within an LDAP directory. If you have a centralized authentication
system that uses LDAP, Guacamole's LDAP support can be a good way to allow your
users to use their existing usernames and passwords to log into Guacamole.

To use the LDAP authentication extension, you will need:

1. An LDAP directory as storage for all authentication data, such as OpenLDAP.

2. The ability to modify the schema of your LDAP directory.

The instructions here assume you already have an LDAP directory installed and
working, and do not cover the initial setup of such a directory.

```{include} include/warn-config-changes.md
```

(ldap-architecture)=

How Guacamole uses LDAP
-----------------------

If the LDAP extension is installed, Guacamole will authenticate users against
your LDAP server by attempting a bind as that user. The given username and
password will be submitted to the LDAP server during the bind attempt.

If the bind attempt is successful, the set of available Guacamole connections,
users, and groups are queried from the LDAP directory by executing an LDAP
query **as the bound user**. Each Guacamole connection is represented within
the directory as a special type of group: `guacConfigGroup`.  Attributes
associated with the group define the protocol and parameters of the connection,
and users are allowed access to the connection only if they are associated with
that group.

This architecture has a number of benefits:

1. Your users can use their existing usernames and passwords to log into
   Guacamole.

2. You can manage Guacamole connections using the same tool that you already
   use to manage your LDAP directory, such as [Apache Directory
   Studio](https://directory.apache.org/studio/).

3. Existing security restrictions can limit visibility/accessibility of
   Guacamole connections.

4. Access to connections can easily be granted and revoked, as each connection
   is represented by a group.

:::{important}
Though Guacamole connections can be stored within the LDAP directory, this is
not required. Connection data can alternatively be stored within a database
like MySQL or PostgreSQL as long as the LDAP username matches the username of
the database user. Configuring Guacamole to use a database for authentication
or connection storage is covered in [](jdbc-auth) and later in this chapter in
[](ldap-and-database).
:::

(ldap-downloading)=

Intalling/Enabling the LDAP extension
-------------------------------------

{{ ext.install('LDAP', 'guacamole-auth-ldap') }}

(ldap-schema-changes)=

Preparing your LDAP directory (optional)
----------------------------------------

Although your LDAP directory already provides a means of storing and
authenticating users, Guacamole also needs storage of connection configuration
data, such as hostnames and ports, and a means of associating users with
connections that they should have access to. You can do this either through
modifying the LDAP directory schema, or through using a database like MySQL or
PostgreSQL. If you do not wish to use the LDAP directory for connection
storage, skip ahead to [](ldap-and-database).

If you wish to store connection data directly within the LDAP directory, the
required modifications to the LDAP schema are made through applying one of the
provided schema files. These schema files define an additional object class,
`guacConfigGroup`, which contains all configuration information for a
particular connection, and can be associated with arbitrarily-many users and
groups. Each connection defined by a `guacConfigGroup` will be accessible only
by users who are members of that group (specified with the member attribute),
or who are members of associated groups (specified with the `seeAlso`
attribute).

:::{important}
The instructions given for applying the Guacamole LDAP schema changes are
specific to OpenLDAP, but other LDAP implementations, including Active
Directory, will have their own methods for updating the schema.

If you are not using OpenLDAP, a standards-compliant schema file is provided
that can be used to update the schema of any LDAP directory supporting
RFC-2252. Please consult the documentation of your LDAP directory to determine
how such schema changes can be applied.
:::

The schema files are located within the `schema/` directory of the archive
containing the LDAP extension. You will only need one of these files:

`guacConfigGroup.schema`
: A standards-compliant file describing the schema. This file can be used with
  any LDAP directory compliant with RFC-2252.

`guacConfigGroup.ldif`
: An LDIF file compatible with OpenLDAP. This file was automatically built from
  the provided `.schema` file for convenience.

This chapter will cover applying `guacConfigGroup.ldif` to an OpenLDAP server.
If you are not using OpenLDAP, your LDAP server should provide documentation
for modifying its schema. If this is the case, please consult the documentation
of your LDAP server before proceeding.

### Applying the schema changes to OpenLDAP

Schema changes to OpenLDAP are applied using the {command}`ldapadd` utility
with the provided `guacConfigGroup.ldif` file:

```console
# ldapadd -Q -Y EXTERNAL -H ldapi:/// -f schema/guacConfigGroup.ldif
adding new entry "cn=guacConfigGroup,cn=schema,cn=config"

#
```

If the `guacConfigGroup` object was added successfully, you should see output
as above. You can confirm the presence of the new object class using
{command}`ldapsearch`:

```console
# ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b cn=schema,cn=config dn
dn: cn=schema,cn=config

dn: cn={0}core,cn=schema,cn=config

dn: cn={1}cosine,cn=schema,cn=config

dn: cn={2}nis,cn=schema,cn=config

dn: cn={3}inetorgperson,cn=schema,cn=config

dn: cn={4}guacConfigGroup,cn=schema,cn=config

#
```

(ldap-and-database)=

Associating LDAP with a database (recommended)
----------------------------------------------

If you install both the LDAP authentication as well as support for a database
(following the instructions in [](jdbc-auth)), Guacamole will automatically
attempt to authenticate against both systems whenever a user attempts to log
in. In addition to any visible objects within the LDAP directory, that user
will have access to any data associated with their account in the database, as
well as any data associated with user groups that they belong to. LDAP user
accounts and groups will be considered equivalent to database users and groups
if their unique names are identical, as determined by the attributes given for
[the `ldap-username-attribute` and `ldap-group-name-attribute`
properties](guac-ldap-config).

Data can be manually associated with LDAP user accounts or groups by creating
corresponding users or groups within the database which each have the same
names. As long as the names are identical, a successful login attempt against
LDAP will be trusted by the database authentication, and that user's associated
data will be visible.

If an administrator account (such as the default `guacadmin` user provided with
the database authentication) has a corresponding user in the LDAP directory
with permission to read other LDAP users and groups, the Guacamole
administrative interface will include them in the lists presented to the
administrator, and will allow connections from the database to be associated
with those users or groups directly.

(guac-ldap-config)=

Required configuration
----------------------

{{ ext.config('ldap', required=True) }}

Additional configuration (optional)
-----------------------------------

{% call ext.config('ldap-optional') %}
Additional properties may be added to `guacamole.properties` to describe how
your LDAP directory is organized and how Guacamole should connect (and bind) to
your LDAP server:
{% endcall %}

(guac-multi-ldap-config)=

### Using multiple LDAP servers

If you have several LDAP servers that Guacamole should authenticate against, it
is possible to provide the configuration details for multiple servers by
creating or editing a YAML file within `GUACAMOLE_HOME` called
`ldap-servers.yml`. This file consists of a single list of servers (a YAML
array of objects) and any number of corresponding configuration options (the
key/value pairs within each YAML object). The available options correspond
_exactly_ to the properties described above except that they lack an `ldap-`
prefix.

For example, the following `guacamole.properties`:

```
ldap-hostname: dc1.example.net
ldap-user-base-dn: ou=Users,dc=example,dc=net
ldap-username-attribute: sAMAccountName
ldap-search-bind-dn: cn=Guacamole,ou=Service Users,dc=example,dc=net
ldap-search-bind-password: SomePassword!
```

is exactly equivalent to the following `ldap-servers.yml` 

```
- hostname: dc1.example.net
  user-base-dn: ou=Users,dc=example,dc=net
  username-attribute: sAMAccountName
  search-bind-dn: cn=Guacamole,ou=Service Users,dc=example,dc=net
  search-bind-password: SomePassword!
```

The benefit of using `ldap-servers.yml` is that the format allows multiple
servers to be defined, relying on the properties within `guacamole.properties`
as defaults. For example, the following `ldap-servers.yml` defines two LDAP
servers:

```
- hostname: dc1.example.net
  user-base-dn: ou=Users,dc=example,dc=net
  username-attribute: sAMAccountName
  search-bind-dn: cn=Guacamole,ou=Service Users,dc=example,dc=net
  search-bind-password: SomePassword!

- hostname: dc2.example.net
  user-base-dn: ou=Users,dc=example,dc=net
  username-attribute: sAMAccountName
  search-bind-dn: cn=Guacamole,ou=Service Users,dc=example,dc=net
  search-bind-password: SomePassword!
```

Leveraging the fact that values within `guacamole.properties` are used as the
default values for all LDAP servers in `ldap-servers.yml`, the above can be
abbreviated by moving the common options into `guacamole.properties`:

```
ldap-user-base-dn: ou=Users,dc=example,dc=net
ldap-username-attribute: sAMAccountName
ldap-search-bind-dn: cn=Guacamole,ou=Service Users,dc=example,dc=net
ldap-search-bind-password: SomePassword!
```

Leaving `ldap-servers.yml` containing, simply:

```
- hostname: dc1.example.net
- hostname: dc2.example.net
```

If multiple LDAP servers are listed within `ldap-servers.yml`, and a user
attempts to log into Guacamole, each defined LDAP server is tried, in order,
until one server successfully authenticates the user or until all servers fail.

If not all LDAP servers are relevant to all users, and it is reasonable to
determine which user is relevant to which LDAP server by the format of their
username, patterns can be specified on a per-server basis to narrow which
servers apply to which login attempts. For example:

```
- hostname: dc1.example.net
  match-usernames: COMPANYA\\(.*)

- hostname: dc2.example.net
  match-usernames: COMPANYB\\(.*)
```

The value for `match-usernames` can be any regular expression accepted by Java,
where the capturing group dictates the portion that should be considered the
user's username with respect to Guacamole. If multiple patterns should apply to
a particular LDAP server, this can be specified with a list of patterns for
`match-usernames`:

```
- hostname: dc1.example.net
  match-usernames:
    - COMPANYA\\(.*)
    - (.*)@a\.example\.net

- hostname: dc2.example.net
  match-usernames:
    - COMPANYB\\(.*)
    - (.*)@b\.example\.net
```

Completing installation
-----------------------

```{include} include/ext-completing.md
```

(guac-ldap-tokens)=

Parameter tokens
----------------

In addition to [the standard parameter tokens](parameter-tokens) and the
parameter tokens from other extensions, authenticating with LDAP makes the
following tokens available for use within connection configurations:

{samp}`$\{LDAP_{ATTRIBUTE}\}`
: The value of the `ATTRIBUTE` attribute of the current user's LDAP account.
  This token will only be defined for users that have the relevant attribute
  set, and only if that attribute was explicitly configured using [the
  `ldap-user-attributes` property](guac-ldap-config).

`${LDAP_DOMAIN}`
: The domain of the LDAP user account of the current user. This token will be
  defined only for users that have authenticated with LDAP, and only for users
  that authenticated with a down-level login (`DOMAIN\username`) or a UPN-style
  login (`username@domain`).

Usage of parameter tokens is discussed in more detail in
[](configuring-guacamole) in [](parameter-tokens).

(ldap-auth-schema)=

The LDAP schema
---------------

Guacamole's LDAP support allows users and connections to be managed purely
within an LDAP directory defined in `guacamole.properties`.  This is
accomplished with a minimum of changes to the standard LDAP schema - all
Guacamole users are traditional LDAP users and share the same mechanism of
authentication. The only new type of object required is a representation for
Guacamole connections, `guacConfigGroup`, which was added to your server's
schema during the install process above.

### Users

All Guacamole users, as far as the LDAP support is concerned, are LDAP users
with standard LDAP credentials. When a user signs in to Guacamole, their
username and password will be used to bind to the LDAP server. If this bind
operation is successful, the available connections are queried from the
directory and the user is allowed in.

### Connections and parameters

Each connection is represented by an instance of the `guacConfigGroup` object
class, an extended version of the standard LDAP `groupOfNames`, which provides
a protocol and set of parameters. Only members of the `guacConfigGroup` will
have access to the corresponding connection.

The `guacConfigGroup` object class provides two new attributes in addition to
those provided by `groupOfNames`:

`guacConfigProtocol`
: The protocol associated with the connection, such as "`vnc`" or "`rdp`". This
  attribute is required for every `guacConfigGroup` and can be given only once.

`guacConfigParameter`
: The name and value of a parameter for the specified protocol. This is given
  as `name=value`, where "name" is the name of the parameter, as defined by the
  documentation for the protocol specified, and "value" is any allowed value for
  that parameter.

  This attribute can be given multiple times for the same connection.

`guacConfigProxyHostname`
: The host name or IP address to use for connecting to guacd in order to
  establish the connection to the server. This attribute is optional and,
  if not provided, will default to the system-level configuration for
  connecting to guacd, either the default of `localhost` or the value
  defined by `guacd-hostname` in `guacamole.properties`. This attribute may
  only be specified once per connection.

`guacConfigProxyPort`
: The TCP port to use in order to connect to guacd to establish the
  connection to the server. This attribute is optional, and, like the
  `guacConfigProxyHostname` attribute, will default to the system-level
  configuration. This attribute may be specified at most once per connection.

`guacConfigProxyEncryption`
: The encryption method that should be used to connect to guacd in order
  to establish the connection to the server. This attribute is optional
  and will default to the system-level configuration for connecting to
  guacd. Valid values for this are `NONE` or `SSL`. This attribute may
  be specified at most once per connection.

For example, to create a new VNC connection which connects to "localhost" at
port 5900, while granting access to `user1` and `user2`, you could create an
`.ldif` file like the following:

```
dn: cn=Example Connection,ou=groups,dc=example,dc=net
objectClass: guacConfigGroup
objectClass: groupOfNames
cn: Example Connection
guacConfigProtocol: vnc
guacConfigParameter: hostname=localhost
guacConfigParameter: port=5900
guacConfigParameter: password=secret
member: cn=user1,ou=people,dc=example,dc=net
member: cn=user2,ou=people,dc=example,dc=net
```

The new connection can then be created using the {command}`ldapadd` utility:

```console
$ ldapadd -x -D cn=admin,dc=example,dc=net -W -f example-connection.ldif
Enter LDAP Password:
adding new entry "cn=Example Connection,ou=groups,dc=example,dc=net"

$
```

Where `cn=admin,dc=example,dc=net` is an administrator account with permission
to create new entries, and `example-connection.ldif` is the name of the `.ldif`
file you just created.

There is, of course, no need to use only the standard LDAP utilities to create
connections and users. There are useful graphical environments for manipulating
LDAP directories, such as [Apache Directory Studio](https://directory.apache.org/studio/),
which make many of the tasks given above much easier.

