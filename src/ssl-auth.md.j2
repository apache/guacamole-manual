{# vim: set filetype=markdown.jinja : #}
{%- import 'include/ext-macros.md.j2' as ext with context -%}

Signing in with smart cards or certificates
===========================================

Single sign-on using SSL client authentication depends on having a reverse
proxy configured to provide SSL termination for Guacamole. Unlike a standard
reverse proxy setup, however, a portion of the requests served through the
proxy will verify the client's identity using SSL client authentication and
pass that information on to Guacamole.

```{include} include/warn-config-changes.md
```

How SSL client authentication works with Guacamole
--------------------------------------------------

Using SSL client authentication for Guacamole involves configuring a reverse
proxy to provide SSL termination for the same instance of Guacamole at two
different domains or subdomains:

1. **A wildcard subdomain and certificate** that will be used strictly for
   performing SSL client authentication. The wildcard certificate is necessary
   to allow Guacamole to generate temporary subdomains and avoid browser
   caching of credentials.

2. **A normal domain/subdomain (and corresponding certificate)** that will be
   used for Guacamole itself and will not use SSL client authentication.

When Guacamole is configured for single sign-on using SSL client
authentication, users are presented with an additional "Certificate / Smart
Card" option at the bottom of the login screen:

![The Guacamole login screen, showing the "Certificate / Smart Card" prompt added by the SSL client authentication extension.](images/ssl-sso-001-link.png)

If a user clicks on "Certificate / Smart Card", Guacamole generates a temporary
subdomain to handle authentication and redirects the user to that subdomain. As
the SSL termination is configured to handle these subdomains with SSL client
authentication, the user is authenticated by the reverse proxy using that
mechanism:

![The browser prompt resulting from starting the SSL client authentication process by clicking the "Certificate / Smart Card" link, displayed in front of the Guacamole login screen.](images/ssl-sso-002-browser-prompt.png)

The reverse proxy notifies Guacamole of the result of authentication using the
`X-Client-Verified` and `X-Client-Certificate` headers. Once the user is
authenticated (or fails to authenticate), Guacamole redirects the user back to
the primary domain and their SSL authentication result is read.

If the user successfully authenticated, their username is determined from the
certificate:

![The Guacamole home screen after successfully signing in using a smart card.](images/ssl-sso-003-success.png)

If the user _did not_ successfully authenticate, authentication with Guacamole
fails and the user sees the login screen again.

(ssl-auth-configuring-proxy)=

Configuring SSL termination to use client authentication
--------------------------------------------------------

There are two separate configurations that will need to be applied to your
reverse proxy, one for each of the domains noted above. In each case, the proxy
will need to add headers that will be consumed by Guacamole's SSL
authentication integration.

:::{hint}
The `*.auth.guac.example.net` and `guac.example.net` domains are used
throughout this documentation as representative placeholders. Your
configuration will differ depending on the domain your users are using to
access your instance of Guacamole.

Both the wildcard domain and normal domain that will be configured here will
need to be referenced in Guacamole's configuration. Take note of these domains,
so that you can provide their values when configuring Guacamole later.
:::

### Wildcard domain (performs SSL client authentication)

Since it is the wildcard domain that will actually perform SSL client
authentication (Guacamole receives the authentication result from your reverse
proxy via HTTP headers), the configuration for the wildcard domain requires
several additional changes from [the standard reverse proxy configuration for
Guacamole](reverse-proxy):

Enable SSL client authentication in "optional" mode
: This will result in the reverse proxy requesting authentication, but will
  not prohibit the authentication result from being sent on to Guacamole if
  authentication fails.

Pass through the `Host` header received by the reverse proxy
: It is the `Host` header that determines whether the request is routed to the
  reverse proxy's handling of wildcard domain vs. normal domain, and Guacamole
  needs this information, as well, to determine context.

Include the authentication result as the value of the `X-Client-Verified` header.
: This header must contain the value `SUCCESS` if authentication succeeded and
  may contain any other value otherwise. If authentication failed, this header
  may contain `FAILED:` followed by a human-readable description of the
  failure, and Guacamole will include that description in its logs.

  Both the Apache HTTP Server and Nginx support this format for passing on the
  result of SSL client authentication.

Include the URL-encoded client certificate in PEM format as the value `X-Client-Certificate` header.
: Here, URL encoding is necessary to allow the certificate to be included as
  the value of an HTTP header. Both the Apache HTTP Server and Nginx support
  URL encoding of this value.

_The portions of the reverse proxy configuration which differ from [the
standard configuration](reverse-proxy) are highlighted below._ Your reverse
proxy configuration will need to be similarly modified to allow Guacamole to
receive and process the authentication result.

::::{tab} Apache HTTP Server
:::{code-block} apache
:emphasize-lines: 3-4,10-12,21-23
<VirtualHost *:443>

    ServerName x.auth.guac.example.net
    ServerAlias *.auth.guac.example.net

    SSLEngine on
    SSLCertificateFile "/etc/ssl/certs/_.auth.guac.example.net.crt"
    SSLCertificateKeyFile "/etc/ssl/private/_.auth.guac.example.net.key"

    SSLCACertificateFile "/etc/ssl/certs/client-auth-ca-certs.crt"
    SSLVerifyClient optional
    SSLVerifyDepth 2

    <Location /guacamole/>

        Order allow,deny
        Allow from all
        ProxyPass http://localhost:8080/guacamole/ flushpackets=on
        ProxyPassReverse http://localhost:8080/guacamole/

        ProxyPreserveHost on
        RequestHeader set X-Client-Certificate "expr=%{escape:%{SSL_CLIENT_CERT}}"
        RequestHeader set X-Client-Verified "%{SSL_CLIENT_VERIFY}s"

    </Location>

</VirtualHost>
:::

:::{hint}
The [typical `<Location /guacamole/websocket-tunnel>`
section](websocket-and-apache) is intentionally omitted above. This is because
SSL client authentication will be performed only via a specific, dedicated
endpoint that does not involve any tunnel, let alone the WebSocket tunnel.

Including a `<Location>` section for the `websocket-tunnel` endpoint beneath
the wildcard domain will not prevent smart card / certificate authentication
from working, but it is unnecessary for the wildcard domain.
:::

::::

::::{tab} Nginx
:::{code-block} nginx
:emphasize-lines: 4,9-10,22-24
server {

    listen 443 ssl;
    server_name _.auth.guac.example.net;

    ssl_certificate /etc/ssl/certs/_.auth.guac.example.net.crt;
    ssl_certificate_key /etc/ssl/private/_.auth.guac.example.net.key;

    ssl_client_certificate /etc/ssl/certs/client-auth-ca-certs.crt;
    ssl_verify_client optional;

    location /guacamole/ {

        proxy_pass http://localhost:8080;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        access_log off;

        proxy_set_header Host $http_host;
        proxy_set_header X-Client-Verified $ssl_client_verify;
        proxy_set_header X-Client-Certificate $ssl_client_escaped_cert;

    }

}
:::
::::

### Normal domain (does not perform SSL client authentication)

Configuration of the non-wildcard, normal domain is simpler than its wildcard
counterpart, but still requires at least pass-through of the `Host` header
received by the reverse proxy. As with the wildcard domain, this is necessary
for Guacamole to determine the context of the request it received.

::::{tab} Apache HTTP Server
:::{code-block} apache
:emphasize-lines: 3,14
<VirtualHost *:443>

    ServerName guac.example.net

    SSLEngine on
    SSLCertificateFile "/etc/ssl/certs/guac.example.net.crt"
    SSLCertificateKeyFile "/etc/ssl/private/guac.example.net.key"

    <Location /guacamole/>
        Order allow,deny
        Allow from all
        ProxyPass http://localhost:8080/guacamole/ flushpackets=on
        ProxyPassReverse http://localhost:8080/guacamole/
        ProxyPreserveHost on
    </Location>

    <Location /guacamole/websocket-tunnel>
        Order allow,deny
        Allow from all
        ProxyPass ws://localhost:8080/guacamole/websocket-tunnel
        ProxyPassReverse ws://localhost:8080/guacamole/websocket-tunnel
    </Location>

</VirtualHost>
:::
::::

::::{tab} Nginx
:::{code-block} nginx
:emphasize-lines: 4,13
server {

    listen 443 ssl;
    server_name guac.example.net;

    ssl_certificate /etc/ssl/certs/guac.example.net.crt;
    ssl_certificate_key /etc/ssl/private/guac.example.net.key;

    location /guacamole/ {
        proxy_pass http://localhost:8080;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        access_log off;
    }

}
:::
::::

With both the wildcard and normal domains configured, your reverse proxy should
be ready to handle SSL client authentication and pass on the results of any
authentication attempts to Guacamole in the format expected.

(ssl-auth-downloading)=

Installing/Enabling the SSL client authentication extension
-----------------------------------------------------------

{{ ext.install('SSL_AUTH', 'guacamole-auth-sso', 'ssl/guacamole-auth-sso-ssl') }}

(ssl-auth-config)=

Required configuration
----------------------

{% call ext.config('ssl', required=True) %}
Guacamole's SSL client authentication support requires two {{ ext.properties()
}} which describe the domains that your reverse proxy has been configured to
use for authentication and for simply accessing Guacamole. These {{ ext.properties() }}
are *absolutely required in all cases*:
{% endcall %}

Additional configuration (optional)
-----------------------------------

{% call ext.config('ssl-optional') %}
Additional optional {{ ext.properties() }} are available to control how the
requests received from your reverse proxy are processed, including narrowing
the distinguished names (DNs) that should be accepted as valid:
{% endcall %}

(ssl-auth-completing)=

Completing installation
-----------------------

```{include} include/ext-completing.md
```

