{# vim: set filetype=markdown.jinja : #}
{%- import 'include/ext-macros.md.j2' as ext with context -%}

Using TOTP for multi-factor authentication
==========================================

Guacamole supports TOTP as a second authentication factor, layered on top of
any other authentication extension, including those available from the main
project website, providing [base requirements for key storage and
enrollment](totp-prerequisites) are met. The TOTP authentication extension
allows users to be additionally verified against a user-specific and secret key
generated during [enrollment of their authentication device](totp-enrollment).

```{include} include/warn-config-changes.md
```

(totp-prerequisites)=

Prerequisites
-------------

The enrollment process used by Guacamole's TOTP support needs to be able
to store an automatically-generated key within the user's account.
Another extension must be installed which supports storage of arbitrary
data from other extensions. *Currently the only extensions provided with
Guacamole which support this kind of storage are the [database
authentication extensions](jdbc-auth).*

It is thus recommended that authentication against a database be fully
configured prior to setting up TOTP. Instructions walking through the setup of
database authentication for Guacamole are provided in [](jdbc-auth).

(totp-architecture)=

How TOTP works with Guacamole
-----------------------------

Guacamole provides support for TOTP as a second authentication factor.  To make
use of the TOTP authentication extension, some other authentication mechanism
will need be configured, as well. When a user attempts to log into Guacamole,
other installed authentication methods will be queried first:

![](images/totp-auth-factor-1.png)

Only after authentication has succeeded with one of those methods will
Guacamole prompt the user to further verify their identity with an
authentication code:

![](images/totp-auth-factor-2.png)

If both the initial authentication attempt and verification using TOTP succeed,
the user will be allowed in. If either mechanism fails, access to Guacamole is
denied.

(totp-enrollment)=

### Enrollment

If the user does not yet have a TOTP key associated with their account (they
have not yet completed enrollment), they will be required to enroll an
authentication device after passing the first authentication factor. A QR code
containing an automatically-generated key will be presented to the user to be
scanned by their authentication app or device:

![](images/totp-enroll.png)

If the authentication device does not support scanning QR codes for enrollment,
the details within the QR code can be revealed by clicking the "Show" link next
to the "Details" header. These values can then be entered manually:

![](images/totp-enroll-detail.png)

Enrollment is completed once the user enters a valid authentication code
generated by their device using the provided key.

:::{important}
If the user does not confirm/complete the enrollment process, the next time the
user logs in they will be asked to go through the enrollment process, again, and
the TOTP data will be regenerated. This means the previously-scanned QR code
and TOTP codes generated with the use of that code will be invalid.
:::


(totp-reset-data)=

### Reseting TOTP Data

It may become necessary for certain users to clear their TOTP key and/or force
them to re-confirm enrollment, such as in situations where a user loses their
phone and needs to reconfigure TOTP. The user's existing TOTP key can be cleared
by checking the "Clear TOTP secret" box in the user interface and then saving the
user configuration. The next time that the user logs in, they will be given a new
key (QR code) and forced to re-enroll.

If you simply want a user to be able to re-configure an existing key, without
resetting the secret, you can un-check the box marked "TOTP key confirmed" and
save the user configuration, and the user will be presented with the QR code
at next login and asked to confirm it.

(totp-disable-user-group)=

### Disabling TOTP for users or groups

In versions of Guacamole prior to 1.6.0, installing and configuring the TOTP
module meant that all Guacamole users would be required to enroll in and
successfully authenticate via the TOTP factor. Starting with 1.6.0 the TOTP
requirement can be disabled on a per-user or per-group basis, allowing
administrators more flexibility in configuring the TOTP requirement.

By default all users will still be required to authenticate with TOTP, however
the requirement can be disabled by checking the "Disable TOTP" checkbox. This
can be done for an individual user account, but it can also be disabled for a
group resulting in the TOTP requirement being disabled for any members of the
group.

![](images/totp-user-config.png)

![](images/totp-group-config.png)

(totp-downloading)=

Installing/Enabling the TOTP extension
--------------------------------------

{{ ext.install('TOTP', 'guacamole-auth-totp') }}

(guac-totp-config)=

Configuration (optional)
------------------------

{% call ext.config('totp') %}
With the exception of [the storage and permission requirements described
above](totp-prerequisites), the TOTP extension should work out-of-the-box
without any additional configuration. Defaults have been chosen for all
configuration parameters such that the TOTP extension will be compatible with
Google Authenticator and similar, popular TOTP implementations.

:::{warning}
Some TOTP applications *assume these defaults* and *silently ignore any other
values*. **Google Authenticator is such an application.** Be sure your
authenticator application supports the values you intend to use before
overriding the defaults.
:::
{% endcall %}

### Bypass/Enforce TOTP for Specific Hosts

{% call ext.config('totp-bypass-enforce') %}
By default, when the TOTP module is enabled, TOTP-based MFA will be enforced for
all users that attempt to log in to Guacamole, regardless of where they are
connecting from. Depending on your use case, it may be necessary to narrow this
behavior and only enforce TOTP-based MFA for certain hosts and bypass it for
others.

```{include} include/ext-client-ips.md
```

TOTP-based MFA can be explicitly bypassed or enforced on a per-host basis by
providing the relevant, exhaustive list of addresses/networks using either
of the following {{ ext.properties() }}:
{% endcall %}

(completing-totp-install)=

Completing installation
-----------------------

```{include} include/ext-completing.md
```

